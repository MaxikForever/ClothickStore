// <auto-generated />
using System;
using Clothick.Infrastructure.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Clothick.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20240111230638_CommentStarRating")]
    partial class CommentStarRating
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.25")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Clothick.Domain.Entities.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = 20,
                            Name = "Pants"
                        },
                        new
                        {
                            Id = 21,
                            Name = "Shoes"
                        },
                        new
                        {
                            Id = 22,
                            Name = "Shirts"
                        },
                        new
                        {
                            Id = 23,
                            Name = "T-Shirts"
                        },
                        new
                        {
                            Id = 24,
                            Name = "Jackets"
                        },
                        new
                        {
                            Id = 25,
                            Name = "Sweaters"
                        },
                        new
                        {
                            Id = 26,
                            Name = "Dresses"
                        },
                        new
                        {
                            Id = 27,
                            Name = "Skirts"
                        },
                        new
                        {
                            Id = 28,
                            Name = "Shorts"
                        },
                        new
                        {
                            Id = 29,
                            Name = "Socks"
                        },
                        new
                        {
                            Id = 30,
                            Name = "Hats"
                        },
                        new
                        {
                            Id = 31,
                            Name = "Scarves"
                        },
                        new
                        {
                            Id = 32,
                            Name = "Belts"
                        },
                        new
                        {
                            Id = 33,
                            Name = "Gloves"
                        },
                        new
                        {
                            Id = 34,
                            Name = "Sunglasses"
                        });
                });

            modelBuilder.Entity("Clothick.Domain.Entities.Color", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Colors");

                    b.HasData(
                        new
                        {
                            Id = 20,
                            Name = "Black"
                        },
                        new
                        {
                            Id = 21,
                            Name = "White"
                        },
                        new
                        {
                            Id = 22,
                            Name = "Red"
                        },
                        new
                        {
                            Id = 23,
                            Name = "Blue"
                        },
                        new
                        {
                            Id = 24,
                            Name = "Green"
                        },
                        new
                        {
                            Id = 25,
                            Name = "Yellow"
                        },
                        new
                        {
                            Id = 26,
                            Name = "Purple"
                        },
                        new
                        {
                            Id = 27,
                            Name = "Orange"
                        },
                        new
                        {
                            Id = 28,
                            Name = "Pink"
                        },
                        new
                        {
                            Id = 29,
                            Name = "Gray"
                        },
                        new
                        {
                            Id = 30,
                            Name = "Brown"
                        },
                        new
                        {
                            Id = 31,
                            Name = "Beige"
                        },
                        new
                        {
                            Id = 32,
                            Name = "Maroon"
                        },
                        new
                        {
                            Id = 33,
                            Name = "Navy"
                        },
                        new
                        {
                            Id = 34,
                            Name = "Olive"
                        });
                });

            modelBuilder.Entity("Clothick.Domain.Entities.Comment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("DatePosted")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("ProductRatingId")
                        .HasColumnType("integer");

                    b.Property<decimal>("StarRating")
                        .HasColumnType("numeric");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ProductRatingId");

                    b.HasIndex("UserId");

                    b.ToTable("Comment");
                });

            modelBuilder.Entity("Clothick.Domain.Entities.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("BrandName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("CategoryId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("DateAdded")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("LastUpdated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("Clothick.Domain.Entities.ProductImage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ImageURL")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("ProductID")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ProductID");

                    b.ToTable("ProductImages");
                });

            modelBuilder.Entity("Clothick.Domain.Entities.ProductRating", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DatePosted")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("ProductID")
                        .HasColumnType("integer");

                    b.Property<decimal>("StarRating")
                        .HasColumnType("numeric");

                    b.HasKey("Id");

                    b.HasIndex("ProductID");

                    b.ToTable("ProductRatings");
                });

            modelBuilder.Entity("Clothick.Domain.Entities.ProductVariant", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("ColorID")
                        .HasColumnType("integer");

                    b.Property<decimal?>("DiscountedPrice")
                        .HasColumnType("numeric");

                    b.Property<int>("ProductID")
                        .HasColumnType("integer");

                    b.Property<string>("SKU")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("SizeID")
                        .HasColumnType("integer");

                    b.Property<int>("Stock")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ColorID");

                    b.HasIndex("ProductID");

                    b.HasIndex("SizeID");

                    b.ToTable("ProductVariants");
                });

            modelBuilder.Entity("Clothick.Domain.Entities.Size", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Sizes");

                    b.HasData(
                        new
                        {
                            Id = 20,
                            Name = "XXXL"
                        },
                        new
                        {
                            Id = 21,
                            Name = "XXL"
                        },
                        new
                        {
                            Id = 22,
                            Name = "XL"
                        },
                        new
                        {
                            Id = 23,
                            Name = "L"
                        },
                        new
                        {
                            Id = 24,
                            Name = "M"
                        },
                        new
                        {
                            Id = 25,
                            Name = "S"
                        },
                        new
                        {
                            Id = 26,
                            Name = "XS"
                        },
                        new
                        {
                            Id = 27,
                            Name = "15"
                        },
                        new
                        {
                            Id = 28,
                            Name = "16"
                        },
                        new
                        {
                            Id = 29,
                            Name = "17"
                        },
                        new
                        {
                            Id = 30,
                            Name = "18"
                        },
                        new
                        {
                            Id = 31,
                            Name = "19"
                        },
                        new
                        {
                            Id = 32,
                            Name = "20"
                        },
                        new
                        {
                            Id = 33,
                            Name = "21"
                        },
                        new
                        {
                            Id = 34,
                            Name = "22"
                        },
                        new
                        {
                            Id = 35,
                            Name = "23"
                        },
                        new
                        {
                            Id = 36,
                            Name = "24"
                        },
                        new
                        {
                            Id = 37,
                            Name = "25"
                        },
                        new
                        {
                            Id = 38,
                            Name = "26"
                        },
                        new
                        {
                            Id = 39,
                            Name = "27"
                        },
                        new
                        {
                            Id = 40,
                            Name = "28"
                        },
                        new
                        {
                            Id = 41,
                            Name = "29"
                        },
                        new
                        {
                            Id = 42,
                            Name = "30"
                        },
                        new
                        {
                            Id = 43,
                            Name = "31"
                        },
                        new
                        {
                            Id = 44,
                            Name = "32"
                        },
                        new
                        {
                            Id = 45,
                            Name = "33"
                        },
                        new
                        {
                            Id = 46,
                            Name = "34"
                        },
                        new
                        {
                            Id = 47,
                            Name = "35"
                        },
                        new
                        {
                            Id = 48,
                            Name = "36"
                        },
                        new
                        {
                            Id = 49,
                            Name = "37"
                        },
                        new
                        {
                            Id = 50,
                            Name = "38"
                        },
                        new
                        {
                            Id = 51,
                            Name = "39"
                        },
                        new
                        {
                            Id = 52,
                            Name = "40"
                        },
                        new
                        {
                            Id = 53,
                            Name = "41"
                        },
                        new
                        {
                            Id = 54,
                            Name = "42"
                        },
                        new
                        {
                            Id = 55,
                            Name = "43"
                        },
                        new
                        {
                            Id = 56,
                            Name = "44"
                        },
                        new
                        {
                            Id = 57,
                            Name = "45"
                        },
                        new
                        {
                            Id = 58,
                            Name = "46"
                        },
                        new
                        {
                            Id = 59,
                            Name = "47"
                        },
                        new
                        {
                            Id = 60,
                            Name = "48"
                        },
                        new
                        {
                            Id = 61,
                            Name = "49"
                        },
                        new
                        {
                            Id = 62,
                            Name = "50"
                        },
                        new
                        {
                            Id = 63,
                            Name = "51"
                        },
                        new
                        {
                            Id = 64,
                            Name = "52"
                        },
                        new
                        {
                            Id = 65,
                            Name = "53"
                        },
                        new
                        {
                            Id = 66,
                            Name = "54"
                        },
                        new
                        {
                            Id = 67,
                            Name = "55"
                        },
                        new
                        {
                            Id = 68,
                            Name = "56"
                        },
                        new
                        {
                            Id = 69,
                            Name = "57"
                        },
                        new
                        {
                            Id = 70,
                            Name = "58"
                        },
                        new
                        {
                            Id = 71,
                            Name = "59"
                        },
                        new
                        {
                            Id = 72,
                            Name = "60"
                        });
                });

            modelBuilder.Entity("Clothick.Domain.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("8a264558-d221-4f2c-b4b4-b42144703f5a"),
                            ConcurrencyStamp = "1fa358dd-c8f2-494d-ab2e-1b829e0ff974",
                            Name = "User",
                            NormalizedName = "USER"
                        },
                        new
                        {
                            Id = new Guid("2e3c96d7-53b1-46d4-9490-b53f97b48fd3"),
                            ConcurrencyStamp = "d8db6c6e-04bd-4cf8-903b-192683f085cd",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = new Guid("101ea5a1-bfd3-43b5-a18f-1da02c410f03"),
                            ConcurrencyStamp = "adc22a82-bb17-4273-869f-858e05ff8b7f",
                            Name = "Guest",
                            NormalizedName = "GUEST"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Clothick.Domain.Entities.Comment", b =>
                {
                    b.HasOne("Clothick.Domain.Entities.ProductRating", "ProductRating")
                        .WithMany("Comments")
                        .HasForeignKey("ProductRatingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Clothick.Domain.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProductRating");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Clothick.Domain.Entities.Product", b =>
                {
                    b.HasOne("Clothick.Domain.Entities.Category", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("Clothick.Domain.Entities.ProductImage", b =>
                {
                    b.HasOne("Clothick.Domain.Entities.Product", "Product")
                        .WithMany("ProductImages")
                        .HasForeignKey("ProductID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Clothick.Domain.Entities.ProductRating", b =>
                {
                    b.HasOne("Clothick.Domain.Entities.Product", "Product")
                        .WithMany("ProductRatings")
                        .HasForeignKey("ProductID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Clothick.Domain.Entities.ProductVariant", b =>
                {
                    b.HasOne("Clothick.Domain.Entities.Color", "Color")
                        .WithMany("ProductVariants")
                        .HasForeignKey("ColorID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Clothick.Domain.Entities.Product", "Product")
                        .WithMany("ProductVariants")
                        .HasForeignKey("ProductID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Clothick.Domain.Entities.Size", "Size")
                        .WithMany("ProductVariants")
                        .HasForeignKey("SizeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Color");

                    b.Navigation("Product");

                    b.Navigation("Size");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("Clothick.Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("Clothick.Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Clothick.Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("Clothick.Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Clothick.Domain.Entities.Category", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("Clothick.Domain.Entities.Color", b =>
                {
                    b.Navigation("ProductVariants");
                });

            modelBuilder.Entity("Clothick.Domain.Entities.Product", b =>
                {
                    b.Navigation("ProductImages");

                    b.Navigation("ProductRatings");

                    b.Navigation("ProductVariants");
                });

            modelBuilder.Entity("Clothick.Domain.Entities.ProductRating", b =>
                {
                    b.Navigation("Comments");
                });

            modelBuilder.Entity("Clothick.Domain.Entities.Size", b =>
                {
                    b.Navigation("ProductVariants");
                });
#pragma warning restore 612, 618
        }
    }
}
